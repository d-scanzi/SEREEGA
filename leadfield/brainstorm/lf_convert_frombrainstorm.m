% lf = lf_convert_frombrainstorm(varargin)
% 
%        Convert a Brainstorm headmodel into a format usable by SEREEGA.
%        It assumes that the headmodel is unconstrained. From Brainstorm:
%
%        "The information relative to each pair sensor <-> grid source point 
%        is stored as successive columns of the matrix are ordered as: 
%        [p1_x, p1_y, p1_z, p2_x, p2_y, p2_z ...]."
%        https://neuroimage.usc.edu/brainstorm/Tutorials/HeadModel
%
%        A chanlocation_MNI file is produced and saved in the directory
%        when the function is used. This file will be called 
%        "my_channelfilename_MNI.mat" where my_channelfilename is the
%        filename of the channel file provided. The produced file is the
%        result of the conversion from the Subject Coordinate System used
%        by Brainstorm to the MNI coordinate system. Furthermore, it is
%        saved in a way to correctly load in EEGLAB, as EEGLAB coordinate
%        system is rotated by 90 degrees in the horizontal plane compared
%        with MNI (https://eeglab.org/tutorials/ConceptsGuide/coordinateSystem.html)
%
%        This function is provided with default files that will be used if
%        the optional arguments are not defined. The channel location file
%        is the EGI-128-GSN-HydroCel-128-E1 (chanloc_gsn_128.mat) already
%        coregistered by Brainstorm to the default headmodel ICBM152 MNI.
%        This is the headmodel provided here (subjectimage_T1.mat). The
%        provided headmodel was computed by applying the DUNEuro FEM 
%        constrained to the surface to the FEM mesh generated with Iso2Mesh.
%        Brainstorm default settings were used. 
%
%        Remember to change these files with your own ones if you need
%        (most likely, you do).
%
% Optional:
%    chanloc   - filename (.mat) of the channel location file used in 
%                Brainstorm.         
%    t1        - filename (.mat) of the structural T1 image used in
%                Brainstorm to compute the headmodel.
%    headmodel - filename (.mat) of the headmodel (leadfield) generated by
%                Brainstorm.
%    scale     - (0|1) Scale leadfield from Brainstomr default V/A-m to 
%                more commonly used microV/nA-m. Deafult 1 (yes).
%
% Out:  
%   lf         - the leadfield containing the following fields
%                .leadfield   - the leadfield, containing projections in three
%                               directions (xyz) for each source, in a 
%                               nchannels x nsources x 3 matrix. This is
%                               provided in microV/nA-m.
%                .orientation - a default orientation for each source. For
%                               Brainstorm, these are directions of the 
%                               normal to the surface for each vertex point
%                .pos         - xyz MNI coordinates of each source
%                .chanlocs    - channel information in EEGLAB format
%
%   
% Usage example:
%        >> lf = lf_convert_frombrainstorm()
%        >> lf = lf_convert_frombrainstorm('chanloc', 'my_chanloc.mat', ...
%                                          't1', 'my_t1_image.mat', ...
%                                          'headmodel', 'my_headmodel.mat')

% 2022-06-30 Daniele Scanzi
%    - First version
% 
% Author: Daniele Scanzi
%
%     Copyright (C) <2022>  <Daniele Scanzi>
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details (https://www.gnu.org/licenses).

function lf = lf_convert_frombrainstorm(varargin)

% parsing input
p = inputParser;

addParameter(p, 'chanloc', 'chanloc_gsn_128.mat', @ischar)          %Channel location file name
addParameter(p, 't1', 'subjectimage_T1.mat', @ischar)               %T1 image for coordinates conversion
addParameter(p, 'headmodel', 'headmodel_surf_duneuro.mat', @ischar) %Headmodel generated in Brainstorm
addParameter(p, 'scale', 1, @isnumeric);

parse(p, varargin{:});

chanloc = p.Results.chanloc;
t1      = p.Results.t1;
hm      = p.Results.headmodel;
scale   = p.Results.scale;

%% Load required data

% Display useful information to user
fprintf('Using channel file: %s \nUsing T1 image file: %s \nUsing Brainstorm headmodel file: %s\n', chanloc, t1, hm);

% Channel location
if ~exist('chanloc', 'var')
     error('SEREEGA:lf_generate_fromnyhead:fileNotFound', ...
         ['Could not find channel location file (%s) in the path.' ...
         '\nMake sure you use the same file you used in Brainstorm to generate the leadfield. ' ...
         '\nAdd it to the same directory as this script'], chanloc)
else
    channels = load(chanloc);
end

% T1 data used in Brainstorm
if ~exist('t1', 'var')
    error('SEREEGA:lf_generate_fromnyhead:fileNotFound', ...
        ['Could not find T1 image file (%s) in the path.' ...
        '\nMake sure you use the same file you used in Brainstorm to generate the leadfield.' ...
        '\nAdd it to the same directory as this script'], t1)
else
    t1_image = load(t1);
end

% Brainstorm head model (leadfield)
if ~exist('hm', 'var')
    error('SEREEGA:lf_generate_fromnyhead:fileNotFound', ...
        ['Could not find headmodel file (%s) in the path.' ...
        '\nMake sure to add the headmodel (leadfield) generated in Brainstorm to the same directory as this script'], hm)
else
    brainstorm_lf = load(hm);
end

%% Convert from Brainstrom format (2D) to Sereega format (3D)
% First convert the 2D leadfield from Brainstorm into a 3D matrix (XYZ
% coordinates)

fprintf('Converting Brainstrom 2D headmodel to 3D matrix\n');

dimnames = [0 1 2];                                            %Used to extract the x,y,z coordinates
dim      = repmat(dimnames, 1, size(brainstorm_lf.Gain, 2)/3); 

% Use copy of original gain matrix (aka leadfield values) for subsequent procedures
% The din row will be used only to divide X-Y-Z dimensions and will be
% discarded
gains = [dim; brainstorm_lf.Gain];

% Extract X-Y-Z dimensions
xdim = gains(2:end, gains(1,:) == 0); %1-4-7-etc columns
ydim = gains(2:end, gains(1,:) == 1); %2-5-8-etc columns
zdim = gains(2:end, gains(1,:) == 2); %3-6-9-etc columns

% Save in 3D matrix
lf3D = cat(3, xdim, ydim, zdim);

% Scale to microV/nA-m
if scale 
    fprintf('Converting leadfield from Brainstorm default V/A-m to microV/nA-m\n')
    lf3D = lf3D * 1e-3;
end
%% Convert leadfiled dipole position and orientation to MNI coordinates

fprintf('Converting dipole locations from Brainstorm Subject Coordinate System (SCS) to MNI system\n');

% Dipoles
gridLoc_MNI = cs_convert(t1_image, 'scs', 'mni', brainstorm_lf.GridLoc);    %Location
gridOri_MNI = cs_convert(t1_image, 'scs', 'mni', brainstorm_lf.GridOrient); %Orientation

fprintf('Converting channel locations from Brainstorm Subject Coordinate System (SCS) to MNI system\n');
%Channels
bschanneloc_MNI = channels; %Channel structure to save MNI coordinates

for ch=1:size(channels.Channel,2)
    
    xyz_chanpos = channels.Channel(ch).Loc;                        %Extract current channel location
    xyz_mni     = cs_convert(t1_image, 'scs', 'mni', xyz_chanpos); %Convert them into MNI coordinates
    bschanneloc_MNI.Channel(ch).Loc = xyz_mni';                    %Save them in chan loc MNI struct

end

% Now convert the fiducials to MNI to correct orientation

bschanneloc_MNI.SCS.NAS    = cs_convert(t1_image, 'scs', 'mni', channels.SCS.NAS);
bschanneloc_MNI.SCS.LPA    = cs_convert(t1_image, 'scs', 'mni', channels.SCS.LPA);
bschanneloc_MNI.SCS.RPA    = cs_convert(t1_image, 'scs', 'mni', channels.SCS.RPA);
bschanneloc_MNI.SCS.Origin = cs_convert(t1_image, 'scs', 'mni', channels.SCS.Origin);

%% Adjust cordinates for correct loading 
% If we save the chanloc file now, EEGLAB will assume that it is a
% Brainstorm chanloc file, which should use a SCS system. However, we are
% now in the MNI coordinate system. This would lead to a channel location
% rotated by 90. Thus, we need to adjust for this. 

for ch = 1:size(bschanneloc_MNI.Channel,2)

   % Extract values for x and y coordinates
   xchan = bschanneloc_MNI.Channel(ch).Loc(1);
   ychan = bschanneloc_MNI.Channel(ch).Loc(2);

   % Swap coordinates and rotate
   bschanneloc_MNI.Channel(ch).Loc(1) = ychan;
   bschanneloc_MNI.Channel(ch).Loc(2) = -xchan;

end

% Save MNI converted channel file in order to open  it with eeglab
fprintf('Saving channel file converted to MNI coordinates\n');
save(strcat(chanloc(1:end-4), '_MNI.mat'), '-struct', 'bschanneloc_MNI');

%% Open with eeglab and adjust fields so they can be used by SEREEGA
eeglabChan = readlocs(strcat(chanloc(1:end-4), '_MNI.mat'), 'filetype', 'mat');
chanfields = fieldnames(eeglabChan);

%Convert to cell to eliminate last entries (EGI fiducial channels) from all fields
eeglabChan = struct2cell(eeglabChan);
eeglabChan(:, :, end-2:end) = [];

%Go back to struct
eeglabChan = cell2struct(eeglabChan, chanfields, 1);

% Create leadfield structure for sereega
lf = struct();
lf.leadfield   = lf3D;
lf.orientation = gridOri_MNI;
lf.pos         = gridLoc_MNI;
lf.chanlocs    = eeglabChan;

end